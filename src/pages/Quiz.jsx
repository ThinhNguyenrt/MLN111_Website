import React, { useState, useEffect } from "react";
import Header from "../components/Header";
import "./Quiz.css";
import "./Theory.css";
import "./Home.css";
import quiz from "../assets/quiz.jpg";

const questions = [
  {
    question: "Trong ch·ªß nghƒ©a M√°c ‚Äì L√™nin, l√Ω lu·∫≠n nh·∫≠n th·ª©c duy v·∫≠t bi·ªán ch·ª©ng nghi√™n c·ª©u v·∫•n ƒë·ªÅ g√¨?",
    options: [
      "A.S·ª± h√¨nh th√†nh c√°c t√¥n gi√°o trong x√£ h·ªôi",
      "B.Kh·∫£ nƒÉng nh·∫≠n th·ª©c th·∫ø gi·ªõi c·ªßa con ng∆∞·ªùi th√¥ng qua ho·∫°t ƒë·ªông th·ª±c ti·ªÖn",
      "C.C√°ch con ng∆∞·ªùi s√°ng t·∫°o ra √Ω th·ª©c ƒë·ªôc l·∫≠p v·ªõi v·∫≠t ch·∫•t",
      "D.C√°c hi·ªán t∆∞·ª£ng si√™u h√¨nh kh√¥ng th·ªÉ ki·ªÉm ch·ª©ng"
    ],
    answer: 2,
  },
  {
    question: "Th·ª±c ti·ªÖn ƒë∆∞·ª£c hi·ªÉu l√† g√¨?",
    options: [
      "A.Ho·∫°t ƒë·ªông tinh th·∫ßn c·ªßa con ng∆∞·ªùi ƒë·ªÉ ph·∫£n √°nh hi·ªán th·ª±c",
      "B.To√†n b·ªô ho·∫°t ƒë·ªông v·∫≠t ch·∫•t c√≥ m·ª•c ƒë√≠ch, mang t√≠nh l·ªãch s·ª≠ ‚Äì x√£ h·ªôi c·ªßa con ng∆∞·ªùi nh·∫±m c·∫£i bi·∫øn t·ª± nhi√™n v√† x√£ h·ªôi",
      "C.C√°c ho·∫°t ƒë·ªông gi·∫£i tr√≠, ngh·ªâ ng∆°i c·ªßa con ng∆∞·ªùi",
      "D.To√†n b·ªô ho·∫°t ƒë·ªông t∆∞·ªüng t∆∞·ª£ng v√† s√°ng t·∫°o ngh·ªá thu·∫≠t c·ªßa con ng∆∞·ªùi"
    ],
    answer: 2,
  },
  {
    question: "Ba h√¨nh th·ª©c c∆° b·∫£n c·ªßa th·ª±c ti·ªÖn l√†:",
    options: [
      "A.Ho·∫°t ƒë·ªông tinh th·∫ßn, ho·∫°t ƒë·ªông s√°ng t·∫°o ngh·ªá thu·∫≠t, ho·∫°t ƒë·ªông nh·∫≠n th·ª©c l√Ω lu·∫≠n",
      "B.Ho·∫°t ƒë·ªông s·∫£n xu·∫•t v·∫≠t ch·∫•t, ho·∫°t ƒë·ªông ch√≠nh tr·ªã ‚Äì x√£ h·ªôi, ho·∫°t ƒë·ªông th·ª±c nghi·ªám khoa h·ªçc",
      "C.Ho·∫°t ƒë·ªông qu√¢n s·ª±, ho·∫°t ƒë·ªông vƒÉn h√≥a, ho·∫°t ƒë·ªông gi√°o d·ª•c",
      "D.Ho·∫°t ƒë·ªông kinh t·∫ø, ho·∫°t ƒë·ªông t√¥n gi√°o, ho·∫°t ƒë·ªông khoa h·ªçc t·ª± nhi√™n"
    ],
    answer: 2,
  },
  {
    question: "Quan ƒëi·ªÉm duy v·∫≠t bi·ªán ch·ª©ng v·ªÅ nh·∫≠n th·ª©c kh·∫≥ng ƒë·ªãnh ƒëi·ªÅu n√†o sau ƒë√¢y?",
    options: [
      "A.Con ng∆∞·ªùi kh√¥ng th·ªÉ nh·∫≠n th·ª©c ƒë∆∞·ª£c b·∫£n ch·∫•t th·∫ø gi·ªõi",
      "B.M·ªçi tri th·ª©c ƒë·ªÅu c√≥ s·∫µn, kh√¥ng c·∫ßn th·ª±c ti·ªÖn ki·ªÉm nghi·ªám",
      "C.Con ng∆∞·ªùi c√≥ kh·∫£ nƒÉng nh·∫≠n th·ª©c th·∫ø gi·ªõi kh√°ch quan, kh√¥ng c√≥ c√°i g√¨ l√† kh√¥ng th·ªÉ nh·∫≠n th·ª©c ƒë∆∞·ª£c, ch·ªâ c√≥ c√°i ch∆∞a nh·∫≠n th·ª©c ƒë∆∞·ª£c",
      "D.Th·∫ø gi·ªõi v·∫≠t ch·∫•t t·ªìn t·∫°i nh·ªù c√≥ √Ω th·ª©c con ng∆∞·ªùi"
    ],
    answer: 3,
  },
  {
    question: "V√¨ sao th·ª±c ti·ªÖn ƒë∆∞·ª£c coi l√† ti√™u chu·∫©n c·ªßa ch√¢n l√Ω?",
    options: [
      "V√¨ th·ª±c ti·ªÖn mang t√≠nh kh√°ch quan v√† cho ph√©p ki·ªÉm nghi·ªám tri th·ª©c c·ªßa con ng∆∞·ªùi",
      "V√¨ th·ª±c ti·ªÖn l√† s·∫£n ph·∫©m c·ªßa √Ω th·ª©c con ng∆∞·ªùi",
      "V√¨ th·ª±c ti·ªÖn ch·ªâ d·ª´ng l·∫°i ·ªü ho·∫°t ƒë·ªông tinh th·∫ßn",
      "V√¨ th·ª±c ti·ªÖn lu√¥n b·∫•t bi·∫øn, kh√¥ng thay ƒë·ªïi qua l·ªãch s·ª≠"
    ],
    answer: 1,
  },
];

const Quiz = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [timeLeft, setTimeLeft] = useState(30);
  const [score, setScore] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [timeRecords, setTimeRecords] = useState([]);
  const [questionStartTime, setQuestionStartTime] = useState(Date.now());
  const [usedHelp, setUsedHelp] = useState(false); // m·ªói c√¢u ch·ªâ 1 quy·ªÅn
  const [fiftyFifty, setFiftyFifty] = useState([]); // l∆∞u index ƒë√°p √°n b·ªã lo·∫°i

  useEffect(() => {
    if (timeLeft <= 0 || selectedAnswer !== null) return;
    const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
    return () => clearTimeout(timer);
  }, [timeLeft, selectedAnswer]);

  const handleAnswer = (index) => {
    setSelectedAnswer(index);

    const elapsed = Math.floor((Date.now() - questionStartTime) / 1000);
    setTimeRecords([...timeRecords, elapsed]);

    if (index === questions[currentQuestion].answer) {
      setScore(score + 1);
    }
  };

  const handleNext = () => {
    setSelectedAnswer(null);
    setTimeLeft(45);
    setQuestionStartTime(Date.now());
    setCurrentQuestion(currentQuestion + 1);
    setUsedHelp(false);
    setFiftyFifty([]);
  };

  // ===== C√ÅC QUY·ªÄN TR·ª¢ GI√öP =====
  const handleHelpFriend = () => {
    if (usedHelp) return;
    setTimeLeft(timeLeft + 15);
    setUsedHelp(true);
  };

  const handleGoogle = () => {
    if (usedHelp) return;
    setTimeLeft(timeLeft + 20);
    setUsedHelp(true);
  };

  const handleFiftyFifty = () => {
    if (usedHelp) return;
    const correctIndex = questions[currentQuestion].answer;
    let wrongIndexes = questions[currentQuestion].options
      .map((_, i) => i)
      .filter((i) => i !== correctIndex);

    // Ch·ªçn ng·∫´u nhi√™n 2 sai ƒë·ªÉ lo·∫°i
    const toRemove = wrongIndexes.sort(() => 0.5 - Math.random()).slice(0, 2);

    setFiftyFifty(toRemove);
    setTimeLeft(timeLeft + 5);
    setUsedHelp(true);
  };

  return (
    <>
      <Header />

      <section className="image-section">
        <div className="banner-content"></div>
        <img src={quiz} alt="Banner" className="lyluan" />
      </section>

      <div className="quiz-page">
        <div className="quiz-container">
          {currentQuestion < questions.length ? (
            <>
              <h2>C√¢u {currentQuestion + 1}</h2>
              <p>{questions[currentQuestion].question}</p>
              <div className="options">
                {questions[currentQuestion].options.map((option, index) => {
                  const isDisabled =
                    fiftyFifty.includes(index) || selectedAnswer !== null;

                  return (
                    <button
                      key={index}
                      className={
                        selectedAnswer !== null
                          ? index === questions[currentQuestion].answer
                            ? "correct"
                            : index === selectedAnswer
                            ? "wrong"
                            : ""
                          : fiftyFifty.includes(index)
                          ? "disabled-option"
                          : ""
                      }
                      onClick={() =>
                        selectedAnswer === null && handleAnswer(index)
                      }
                      disabled={isDisabled}
                    >
                      {option}
                    </button>
                  );
                })}
              </div>

              <div className="quiz-footer">
                <span>‚è≥ Th·ªùi gian: {timeLeft}s</span>

                <div className="help-buttons">
                  <button
                    className="help-btn"
                    onClick={handleHelpFriend}
                    disabled={usedHelp || selectedAnswer !== null}
                  >
                    H·ªó tr·ª£ t·ª´ b·∫°n b√® (+15s)
                  </button>
                  <button
                    className="help-btn"
                    onClick={handleGoogle}
                    disabled={usedHelp || selectedAnswer !== null}
                  >
                    Google (+20s)
                  </button>
                  <button
                    className="help-btn"
                    onClick={handleFiftyFifty}
                    disabled={usedHelp || selectedAnswer !== null}
                  >
                    50:50 (+5s)
                  </button>
                </div>
              </div>

              {selectedAnswer !== null && (
                <>
                  <p className="feedback">
                    {selectedAnswer === questions[currentQuestion].answer
                      ? "‚úÖ Ch√≠nh x√°c!"
                      : "‚ùå Sai r·ªìi!"}
                  </p>

                  {currentQuestion < questions.length - 1 ? (
                    <button className="next-btn" onClick={handleNext}>
                      Ti·∫øp theo ‚Üí
                    </button>
                  ) : (
                    <button className="next-btn" onClick={handleNext}>
                      Xem k·∫øt qu·∫£ üéâ
                    </button>
                  )}
                </>
              )}
            </>
          ) : (
            <div className="result">
              <h2>K·∫øt th√∫c! üéâ</h2>
              <p>
                ƒêi·ªÉm c·ªßa b·∫°n: {score}/{questions.length}
              </p>
              <h3>‚è±Ô∏è Th·ªùi gian cho t·ª´ng c√¢u:</h3>
              <ul>
                {timeRecords.map((t, i) => (
                  <li key={i}>
                    C√¢u {i + 1}: {t}s
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>

      <section className="quote-section">
        <div className="quote-container">
          <blockquote className="quote">
            <p>
              "Th·ª±c ti·ªÖn cao h∆°n nh·∫≠n th·ª©c l√Ω thuy·∫øt v√¨ n√≥ kh√¥ng nh·ªØng c√≥ ph·∫©m gi√°
              c·ªßa t√≠nh ph·ªï bi·∫øn m√† c√≤n c√≥ ph·∫©m gi√° c·ªßa t√≠nh hi·ªán th·ª±c tr·ª±c ti·∫øp."
            </p>
            <cite>- V.I.Lenin</cite>
          </blockquote>
        </div>
      </section>
    </>
  );
};

export default Quiz;